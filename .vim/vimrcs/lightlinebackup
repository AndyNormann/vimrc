
" Makes unite behave with lightline
let g:unite_force_overwrite_statusline = 0

" Lightline config
let g:lightline = {
            \ 'colorscheme': 'jellybeans',
            \ 'active': { 
            \   'left': [ [ 'mode', 'paste' ], ['buffer'], ['bufferline'] ],
            \   'right': ['tabs']
            \ },
            \ 'inactive': {
            \   'left': [],
            \   'right': [['filename'], ['modified', 'readonly']]
            \ },
            \ 'component': {
            \     'bufferline': '%{bufferline#refresh_status()}%{MyBufferline()[0]}'.
            \                   '%#TabLineSel#%{g:bufferline_status_info.current}'.
            \                   '%#LightLineLeft_active_2#%{MyBufferline()[2]}',
            \     'buffer': 'buffer'
            \ },
            \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
            \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" },
            \ 'component_function': {
            \   'mode': 'LLMode',
            \   'readonly': 'MyReadonly',
            \ }
            \}

" Function for setting the text for modes in lightline
function! LLMode()
  return
        \ lightline#mode() == 'NORMAL' ? 'NORMAL' :
        \ lightline#mode() == 'INSERT' ? 'INSERT' :
        \ lightline#mode() == 'VISUAL' ? 'VISUAL' :
        \ lightline#mode() == 'V-LINE' ? 'V-LINE' :
        \ lightline#mode() == 'V-BLOCK' ? 'V-BLOCK' :
        \ lightline#mode() == 'REPLACE' ? 'REPLACE' : lightline#mode()
endfunction

" Sets a fancy symbol if the file is readonly
function! MyReadonly()
    return &readonly ? 'î‚¢' : ''
endfunction

" Sets up the bufferline so it only shows some buffers at a time and makes it work better with splits
function! MyBufferline()
    call bufferline#refresh_status()
    let b = g:bufferline_status_info.before
    let c = g:bufferline_status_info.current
    let a = g:bufferline_status_info.after
    let alen = strlen(a)
    let blen = strlen(b)
    let clen = strlen(c)
    let w = winwidth(0) * 4 / 10
    if w < alen+blen+clen
        let whalf = (w - strlen(c)) / 2
        let aa = alen > whalf && blen > whalf ? a[:whalf] : alen + blen < w - clen || alen < whalf ? a : a[:(w - clen - blen)]
        let bb = alen > whalf && blen > whalf ? b[-(whalf):] : alen + blen < w - clen || blen < whalf ? b : b[-(w - clen - alen):]
        return [(strlen(bb) < strlen(b) ? '...' : '') . bb, c, aa . (strlen(aa) < strlen(a) ? '...' : '')]
    else
        return [b, c, a]
    endif
endfunction

" Bufferline config
let g:bufferline_echo = 0
let g:bufferline_active_buffer_left = ""
let g:bufferline_active_buffer_right = ""
let g:bufferline_show_bufnr = 0
